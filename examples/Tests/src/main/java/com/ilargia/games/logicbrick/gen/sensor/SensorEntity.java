package com.ilargia.games.logicbrick.gen.sensor;

import com.ilargia.games.entitas.api.*;
import com.ilargia.games.entitas.Entity;
import java.util.Stack;
import com.ilargia.games.logicbrick.component.sensor.AlwaysSensor;
import com.ilargia.games.entitas.api.IComponent;
import com.ilargia.games.logicbrick.component.sensor.CollisionSensor;
import com.badlogic.gdx.physics.box2d.Contact;
import com.ilargia.games.entitas.api.IEntity;
import com.ilargia.games.entitas.factories.EntitasCollections;
import java.util.Set;
import com.ilargia.games.logicbrick.component.sensor.DelaySensor;
import com.ilargia.games.logicbrick.component.sensor.Frequency;
import com.ilargia.games.logicbrick.component.sensor.Link;
import com.ilargia.games.logicbrick.component.sensor.Mode;
import com.ilargia.games.logicbrick.component.sensor.NearSensor;
import com.ilargia.games.logicbrick.component.sensor.RadarSensor;
import com.ilargia.games.logicbrick.data.Axis2D;
import com.ilargia.games.logicbrick.component.sensor.RaySensor;

/**
 * ---------------------------------------------------------------------------
 * '<auto-generated>' This code was generated by CodeGeneratorApp.
 * ---------------------------------------------------------------------------
 */
public class SensorEntity extends Entity {

	public AlwaysSensor AlwaysSensorComponent = new AlwaysSensor();

	public SensorEntity() {
	}

	public boolean isAlwaysSensor() {
		return hasComponent(SensorComponentsLookup.AlwaysSensor);
	}

	public SensorEntity setAlwaysSensor(boolean value) {
		if (value != hasComponent(SensorComponentsLookup.AlwaysSensor)) {
			if (value) {
				addComponent(SensorComponentsLookup.AlwaysSensor,
						AlwaysSensorComponent);
			} else {
				removeComponent(SensorComponentsLookup.AlwaysSensor);
			}
		}
		return this;
	}

	public CollisionSensor getCollisionSensor() {
		return (CollisionSensor) getComponent(SensorComponentsLookup.CollisionSensor);
	}

	public boolean hasCollisionSensor() {
		return hasComponent(SensorComponentsLookup.CollisionSensor);
	}

	public SensorEntity addCollisionSensor(String targetTag) {
		CollisionSensor component = (CollisionSensor) recoverComponent(SensorComponentsLookup.CollisionSensor);
		if (component == null) {
			component = new CollisionSensor(targetTag);
		} else {
			component.targetTag = targetTag;
			component.collisionSignal = false;
		}
		addComponent(SensorComponentsLookup.CollisionSensor, component);
		return this;
	}

	public SensorEntity replaceCollisionSensor(String targetTag) {
		CollisionSensor component = (CollisionSensor) recoverComponent(SensorComponentsLookup.CollisionSensor);
		if (component == null) {
			component = new CollisionSensor(targetTag);
		} else {
			component.targetTag = targetTag;
			component.collisionSignal = false;
		}
		replaceComponent(SensorComponentsLookup.CollisionSensor, component);
		return this;
	}

	public SensorEntity removeCollisionSensor() {
		removeComponent(SensorComponentsLookup.CollisionSensor);
		return this;
	}

	public DelaySensor getDelaySensor() {
		return (DelaySensor) getComponent(SensorComponentsLookup.DelaySensor);
	}

	public boolean hasDelaySensor() {
		return hasComponent(SensorComponentsLookup.DelaySensor);
	}

	public SensorEntity addDelaySensor(float delay, float duration,
			boolean repeat) {
		DelaySensor component = (DelaySensor) recoverComponent(SensorComponentsLookup.DelaySensor);
		if (component == null) {
			component = new DelaySensor(delay, duration, repeat);
		} else {
			component.delay = delay;
			component.duration = duration;
			component.repeat = repeat;
			component.time = 0;
		}
		addComponent(SensorComponentsLookup.DelaySensor, component);
		return this;
	}

	public SensorEntity replaceDelaySensor(float delay, float duration,
			boolean repeat) {
		DelaySensor component = (DelaySensor) recoverComponent(SensorComponentsLookup.DelaySensor);
		if (component == null) {
			component = new DelaySensor(delay, duration, repeat);
		} else {
			component.delay = delay;
			component.duration = duration;
			component.repeat = repeat;
			component.time = 0;
		}
		replaceComponent(SensorComponentsLookup.DelaySensor, component);
		return this;
	}

	public SensorEntity removeDelaySensor() {
		removeComponent(SensorComponentsLookup.DelaySensor);
		return this;
	}

	public Frequency getFrequency() {
		return (Frequency) getComponent(SensorComponentsLookup.Frequency);
	}

	public boolean hasFrequency() {
		return hasComponent(SensorComponentsLookup.Frequency);
	}

	public SensorEntity addFrequency(float tick) {
		Frequency component = (Frequency) recoverComponent(SensorComponentsLookup.Frequency);
		if (component == null) {
			component = new Frequency(tick);
		} else {
			component.tick = tick;
		}
		addComponent(SensorComponentsLookup.Frequency, component);
		return this;
	}

	public SensorEntity replaceFrequency(float tick) {
		Frequency component = (Frequency) recoverComponent(SensorComponentsLookup.Frequency);
		if (component == null) {
			component = new Frequency(tick);
		} else {
			component.tick = tick;
		}
		replaceComponent(SensorComponentsLookup.Frequency, component);
		return this;
	}

	public SensorEntity removeFrequency() {
		removeComponent(SensorComponentsLookup.Frequency);
		return this;
	}

	public Link getLink() {
		return (Link) getComponent(SensorComponentsLookup.Link);
	}

	public boolean hasLink() {
		return hasComponent(SensorComponentsLookup.Link);
	}

	public SensorEntity addLink(int targetEntity) {
		Link component = (Link) recoverComponent(SensorComponentsLookup.Link);
		if (component == null) {
			component = new Link(targetEntity);
		} else {
			component.targetEntity = targetEntity;
			component.isOpen = false;
			component.isChanged = false;
			component.pulse = false;
		}
		addComponent(SensorComponentsLookup.Link, component);
		return this;
	}

	public SensorEntity replaceLink(int targetEntity) {
		Link component = (Link) recoverComponent(SensorComponentsLookup.Link);
		if (component == null) {
			component = new Link(targetEntity);
		} else {
			component.targetEntity = targetEntity;
			component.isOpen = false;
			component.isChanged = false;
			component.pulse = false;
		}
		replaceComponent(SensorComponentsLookup.Link, component);
		return this;
	}

	public SensorEntity removeLink() {
		removeComponent(SensorComponentsLookup.Link);
		return this;
	}

	public Mode getMode() {
		return (Mode) getComponent(SensorComponentsLookup.Mode);
	}

	public boolean hasMode() {
		return hasComponent(SensorComponentsLookup.Mode);
	}

	public SensorEntity addMode(boolean type) {
		Mode component = (Mode) recoverComponent(SensorComponentsLookup.Mode);
		if (component == null) {
			component = new Mode();
		}
		component.type = type;
		addComponent(SensorComponentsLookup.Mode, component);
		return this;
	}

	public SensorEntity replaceMode(boolean type) {
		Mode component = (Mode) recoverComponent(SensorComponentsLookup.Mode);
		if (component == null) {
			component = new Mode();
		}
		component.type = type;
		replaceComponent(SensorComponentsLookup.Mode, component);
		return this;
	}

	public SensorEntity removeMode() {
		removeComponent(SensorComponentsLookup.Mode);
		return this;
	}

	public NearSensor getNearSensor() {
		return (NearSensor) getComponent(SensorComponentsLookup.NearSensor);
	}

	public boolean hasNearSensor() {
		return hasComponent(SensorComponentsLookup.NearSensor);
	}

	public SensorEntity addNearSensor(String targetTag, float distance,
			float resetDistance) {
		NearSensor component = (NearSensor) recoverComponent(SensorComponentsLookup.NearSensor);
		if (component == null) {
			component = new NearSensor(targetTag, distance, resetDistance);
		} else {
			component.targetTag = targetTag;
			component.distance = distance;
			component.resetDistance = resetDistance;
			component.distanceContactList = EntitasCollections
					.createSet(Integer.class);
			component.resetDistanceContactList = EntitasCollections
					.createSet(Integer.class);
		}
		addComponent(SensorComponentsLookup.NearSensor, component);
		return this;
	}

	public SensorEntity replaceNearSensor(String targetTag, float distance,
			float resetDistance) {
		NearSensor component = (NearSensor) recoverComponent(SensorComponentsLookup.NearSensor);
		if (component == null) {
			component = new NearSensor(targetTag, distance, resetDistance);
		} else {
			component.targetTag = targetTag;
			component.distance = distance;
			component.resetDistance = resetDistance;
			component.distanceContactList = EntitasCollections
					.createSet(Integer.class);
			component.resetDistanceContactList = EntitasCollections
					.createSet(Integer.class);
		}
		replaceComponent(SensorComponentsLookup.NearSensor, component);
		return this;
	}

	public SensorEntity removeNearSensor() {
		removeComponent(SensorComponentsLookup.NearSensor);
		return this;
	}

	public RadarSensor getRadarSensor() {
		return (RadarSensor) getComponent(SensorComponentsLookup.RadarSensor);
	}

	public boolean hasRadarSensor() {
		return hasComponent(SensorComponentsLookup.RadarSensor);
	}

	public SensorEntity addRadarSensor(String targetTag, Axis2D axis2D,
			float distance, float angle) {
		RadarSensor component = (RadarSensor) recoverComponent(SensorComponentsLookup.RadarSensor);
		if (component == null) {
			component = new RadarSensor(targetTag, axis2D, distance, angle);
		} else {
			component.targetTag = targetTag;
			component.axis2D = axis2D;
			component.distance = distance;
			component.angle = angle;
			component.collisionSignal = false;
		}
		addComponent(SensorComponentsLookup.RadarSensor, component);
		return this;
	}

	public SensorEntity replaceRadarSensor(String targetTag, Axis2D axis2D,
			float distance, float angle) {
		RadarSensor component = (RadarSensor) recoverComponent(SensorComponentsLookup.RadarSensor);
		if (component == null) {
			component = new RadarSensor(targetTag, axis2D, distance, angle);
		} else {
			component.targetTag = targetTag;
			component.axis2D = axis2D;
			component.distance = distance;
			component.angle = angle;
			component.collisionSignal = false;
		}
		replaceComponent(SensorComponentsLookup.RadarSensor, component);
		return this;
	}

	public SensorEntity removeRadarSensor() {
		removeComponent(SensorComponentsLookup.RadarSensor);
		return this;
	}

	public RaySensor getRaySensor() {
		return (RaySensor) getComponent(SensorComponentsLookup.RaySensor);
	}

	public boolean hasRaySensor() {
		return hasComponent(SensorComponentsLookup.RaySensor);
	}

	public SensorEntity addRaySensor(String targetTag, Axis2D axis2D,
			float range, boolean xRayMode) {
		RaySensor component = (RaySensor) recoverComponent(SensorComponentsLookup.RaySensor);
		if (component == null) {
			component = new RaySensor(targetTag, axis2D, range, xRayMode);
		} else {
			component.targetTag = targetTag;
			component.axis2D = axis2D;
			component.range = range;
			component.xRayMode = xRayMode;
			component.collisionSignal = false;
		}
		addComponent(SensorComponentsLookup.RaySensor, component);
		return this;
	}

	public SensorEntity replaceRaySensor(String targetTag, Axis2D axis2D,
			float range, boolean xRayMode) {
		RaySensor component = (RaySensor) recoverComponent(SensorComponentsLookup.RaySensor);
		if (component == null) {
			component = new RaySensor(targetTag, axis2D, range, xRayMode);
		} else {
			component.targetTag = targetTag;
			component.axis2D = axis2D;
			component.range = range;
			component.xRayMode = xRayMode;
			component.collisionSignal = false;
		}
		replaceComponent(SensorComponentsLookup.RaySensor, component);
		return this;
	}

	public SensorEntity removeRaySensor() {
		removeComponent(SensorComponentsLookup.RaySensor);
		return this;
	}
}