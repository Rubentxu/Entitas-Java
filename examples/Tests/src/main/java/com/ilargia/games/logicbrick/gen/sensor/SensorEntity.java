package com.ilargia.games.logicbrick.gen.sensor;

import com.ilargia.games.entitas.api.*;
import com.ilargia.games.entitas.Entity;
import java.util.Stack;
import com.ilargia.games.logicbrick.component.sensor.AlwaysSensor;
import com.ilargia.games.entitas.api.IComponent;
import com.ilargia.games.logicbrick.component.sensor.CollisionSensor;
import com.badlogic.gdx.physics.box2d.Contact;
import com.ilargia.games.entitas.api.IEntity;
import com.ilargia.games.entitas.factories.EntitasCollections;
import java.util.Set;
import com.ilargia.games.logicbrick.component.sensor.DelaySensor;
import com.ilargia.games.logicbrick.component.sensor.Frequency;
import com.ilargia.games.logicbrick.component.sensor.Mode;
import com.ilargia.games.logicbrick.component.sensor.Signal;

/**
 * ---------------------------------------------------------------------------
 * '<auto-generated>' This code was generated by CodeGeneratorApp.
 * ---------------------------------------------------------------------------
 */
public class SensorEntity extends Entity {

	public AlwaysSensor AlwaysSensorComponent = new AlwaysSensor();

	public SensorEntity() {
	}

	public boolean isAlwaysSensor() {
		return hasComponent(SensorComponentsLookup.AlwaysSensor);
	}

	public SensorEntity setAlwaysSensor(boolean value) {
		if (value != hasComponent(SensorComponentsLookup.AlwaysSensor)) {
			if (value) {
				addComponent(SensorComponentsLookup.AlwaysSensor,
						AlwaysSensorComponent);
			} else {
				removeComponent(SensorComponentsLookup.AlwaysSensor);
			}
		}
		return this;
	}

	public CollisionSensor getCollisionSensor() {
		return (CollisionSensor) getComponent(SensorComponentsLookup.CollisionSensor);
	}

	public boolean hasCollisionSensor() {
		return hasComponent(SensorComponentsLookup.CollisionSensor);
	}

	public SensorEntity addCollisionSensor(String targetTag) {
		CollisionSensor component = (CollisionSensor) recoverComponent(SensorComponentsLookup.CollisionSensor);
		if (component == null) {
			component = new CollisionSensor(targetTag);
		} else {
			component.targetTag = targetTag;
		}
		addComponent(SensorComponentsLookup.CollisionSensor, component);
		return this;
	}

	public SensorEntity replaceCollisionSensor(String targetTag) {
		CollisionSensor component = (CollisionSensor) recoverComponent(SensorComponentsLookup.CollisionSensor);
		if (component == null) {
			component = new CollisionSensor(targetTag);
		} else {
			component.targetTag = targetTag;
		}
		replaceComponent(SensorComponentsLookup.CollisionSensor, component);
		return this;
	}

	public SensorEntity removeCollisionSensor() {
		removeComponent(SensorComponentsLookup.CollisionSensor);
		return this;
	}

	public DelaySensor getDelaySensor() {
		return (DelaySensor) getComponent(SensorComponentsLookup.DelaySensor);
	}

	public boolean hasDelaySensor() {
		return hasComponent(SensorComponentsLookup.DelaySensor);
	}

	public SensorEntity addDelaySensor(float delay, float duration,
			boolean repeat) {
		DelaySensor component = (DelaySensor) recoverComponent(SensorComponentsLookup.DelaySensor);
		if (component == null) {
			component = new DelaySensor(delay, duration, repeat);
		} else {
			component.delay = delay;
			component.duration = duration;
			component.repeat = repeat;
			component.time = 0;
		}
		addComponent(SensorComponentsLookup.DelaySensor, component);
		return this;
	}

	public SensorEntity replaceDelaySensor(float delay, float duration,
			boolean repeat) {
		DelaySensor component = (DelaySensor) recoverComponent(SensorComponentsLookup.DelaySensor);
		if (component == null) {
			component = new DelaySensor(delay, duration, repeat);
		} else {
			component.delay = delay;
			component.duration = duration;
			component.repeat = repeat;
			component.time = 0;
		}
		replaceComponent(SensorComponentsLookup.DelaySensor, component);
		return this;
	}

	public SensorEntity removeDelaySensor() {
		removeComponent(SensorComponentsLookup.DelaySensor);
		return this;
	}

	public Frequency getFrequency() {
		return (Frequency) getComponent(SensorComponentsLookup.Frequency);
	}

	public boolean hasFrequency() {
		return hasComponent(SensorComponentsLookup.Frequency);
	}

	public SensorEntity addFrequency(float tick) {
		Frequency component = (Frequency) recoverComponent(SensorComponentsLookup.Frequency);
		if (component == null) {
			component = new Frequency(tick);
		} else {
			component.tick = tick;
		}
		addComponent(SensorComponentsLookup.Frequency, component);
		return this;
	}

	public SensorEntity replaceFrequency(float tick) {
		Frequency component = (Frequency) recoverComponent(SensorComponentsLookup.Frequency);
		if (component == null) {
			component = new Frequency(tick);
		} else {
			component.tick = tick;
		}
		replaceComponent(SensorComponentsLookup.Frequency, component);
		return this;
	}

	public SensorEntity removeFrequency() {
		removeComponent(SensorComponentsLookup.Frequency);
		return this;
	}

	public Mode getMode() {
		return (Mode) getComponent(SensorComponentsLookup.Mode);
	}

	public boolean hasMode() {
		return hasComponent(SensorComponentsLookup.Mode);
	}

	public SensorEntity addMode(boolean type) {
		Mode component = (Mode) recoverComponent(SensorComponentsLookup.Mode);
		if (component == null) {
			component = new Mode();
		}
		component.type = type;
		addComponent(SensorComponentsLookup.Mode, component);
		return this;
	}

	public SensorEntity replaceMode(boolean type) {
		Mode component = (Mode) recoverComponent(SensorComponentsLookup.Mode);
		if (component == null) {
			component = new Mode();
		}
		component.type = type;
		replaceComponent(SensorComponentsLookup.Mode, component);
		return this;
	}

	public SensorEntity removeMode() {
		removeComponent(SensorComponentsLookup.Mode);
		return this;
	}

	public Signal getSignal() {
		return (Signal) getComponent(SensorComponentsLookup.Signal);
	}

	public boolean hasSignal() {
		return hasComponent(SensorComponentsLookup.Signal);
	}

	public SensorEntity addSignal(boolean isOpen, boolean isChanged,
			boolean pulse) {
		Signal component = (Signal) recoverComponent(SensorComponentsLookup.Signal);
		if (component == null) {
			component = new Signal();
		}
		component.isOpen = isOpen;
		component.isChanged = isChanged;
		component.pulse = pulse;
		addComponent(SensorComponentsLookup.Signal, component);
		return this;
	}

	public SensorEntity replaceSignal(boolean isOpen, boolean isChanged,
			boolean pulse) {
		Signal component = (Signal) recoverComponent(SensorComponentsLookup.Signal);
		if (component == null) {
			component = new Signal();
		}
		component.isOpen = isOpen;
		component.isChanged = isChanged;
		component.pulse = pulse;
		replaceComponent(SensorComponentsLookup.Signal, component);
		return this;
	}

	public SensorEntity removeSignal() {
		removeComponent(SensorComponentsLookup.Signal);
		return this;
	}
}