package com.ilargia.games.core;

import com.ilargia.games.entitas.Context;
import com.ilargia.games.entitas.api.*;
import com.ilargia.games.core.input.InputEntity;
import com.ilargia.games.core.game.GameEntity;
import com.ilargia.games.core.state.GameStateEntity;
import com.ilargia.games.core.input.InputComponentsLookup;
import com.ilargia.games.core.game.GameComponentsLookup;
import com.ilargia.games.core.state.GamestateComponentsLookup;
import com.ilargia.games.core.input.InputContext;
import com.ilargia.games.core.game.GameContext;
import com.ilargia.games.core.state.GameStateContext;

/**
 * ---------------------------------------------------------------------------
 * '<auto-generated>' This code was generated by CodeGeneratorApp.
 * ---------------------------------------------------------------------------
 */
public class Entitas implements IContexts {

	public InputContext input;
	public GameContext game;
	public GameStateContext gamestate;

	public Entitas() {
		input = createInputContext();
		game = createGameContext();
		gamestate = createGamestateContext();
	}

	public InputContext createInputContext() {
		return new InputContext(InputComponentsLookup.totalComponents, 0,
				new ContextInfo("Input",
						InputComponentsLookup.componentNames(),
						InputComponentsLookup.componentTypes()),
				factoryInputEntity());
	}

	public GameContext createGameContext() {
		return new GameContext(GameComponentsLookup.totalComponents, 0,
				new ContextInfo("Game", GameComponentsLookup.componentNames(),
						GameComponentsLookup.componentTypes()),
				factoryGameEntity());
	}

	public GameStateContext createGamestateContext() {
		return new GameStateContext(GamestateComponentsLookup.totalComponents,
				0, new ContextInfo("GameState",
						GamestateComponentsLookup.componentNames(),
						GamestateComponentsLookup.componentTypes()),
				factoryGameStateEntity());
	}

	@Override
	public Context[] allContexts() {
		return new Context[]{input, game, gamestate};
	}

	public EntityBaseFactory<InputEntity> factoryInputEntity() {
		return () -> {
			return new InputEntity();
		};
	}

	public EntityBaseFactory<GameEntity> factoryGameEntity() {
		return () -> {
			return new GameEntity();
		};
	}

	public EntityBaseFactory<GameStateEntity> factoryGameStateEntity() {
		return () -> {
			return new GameStateEntity();
		};
	}
}