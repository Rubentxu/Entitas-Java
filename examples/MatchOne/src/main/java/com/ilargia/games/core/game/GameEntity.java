package com.ilargia.games.core.game;

import com.ilargia.games.entitas.api.*;
import com.ilargia.games.entitas.Entity;
import java.util.Stack;
import com.ilargia.games.components.game.Asset;
import com.ilargia.games.entitas.api.IComponent;
import com.ilargia.games.components.game.Destroy;
import com.ilargia.games.components.game.GameBoard;
import com.ilargia.games.components.game.GameBoardElement;
import com.ilargia.games.components.game.Interactive;
import com.ilargia.games.components.game.Movable;
import com.ilargia.games.components.game.Position;
import com.ilargia.games.components.game.TextureView;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.physics.box2d.Body;

/**
 * ---------------------------------------------------------------------------
 * '<auto-generated>' This code was generated by CodeGeneratorApp.
 * ---------------------------------------------------------------------------
 */
public class GameEntity extends Entity {

	public Destroy DestroyComponent = new Destroy();
	public GameBoardElement GameBoardElementComponent = new GameBoardElement();
	public Interactive InteractiveComponent = new Interactive();
	public Movable MovableComponent = new Movable();

	public GameEntity() {
	}

	public Asset getAsset() {
		return (Asset) getComponent(GameComponentsLookup.Asset);
	}

	public boolean hasAsset() {
		return hasComponent(GameComponentsLookup.Asset);
	}

	public GameEntity addAsset(String name) {
		Asset component = (Asset) recoverComponent(GameComponentsLookup.Asset);
		if (component == null) {
			component = new Asset(name);
		} else {
			component.name = name;
		}
		addComponent(GameComponentsLookup.Asset, component);
		return this;
	}

	public GameEntity replaceAsset(String name) {
		Asset component = (Asset) recoverComponent(GameComponentsLookup.Asset);
		if (component == null) {
			component = new Asset(name);
		} else {
			component.name = name;
		}
		replaceComponent(GameComponentsLookup.Asset, component);
		return this;
	}

	public GameEntity removeAsset() {
		removeComponent(GameComponentsLookup.Asset);
		return this;
	}

	public boolean isDestroy() {
		return hasComponent(GameComponentsLookup.Destroy);
	}

	public GameEntity setDestroy(boolean value) {
		if (value != hasComponent(GameComponentsLookup.Destroy)) {
			if (value) {
				addComponent(GameComponentsLookup.Destroy, DestroyComponent);
			} else {
				removeComponent(GameComponentsLookup.Destroy);
			}
		}
		return this;
	}

	public GameBoard getGameBoard() {
		return (GameBoard) getComponent(GameComponentsLookup.GameBoard);
	}

	public boolean hasGameBoard() {
		return hasComponent(GameComponentsLookup.GameBoard);
	}

	public GameEntity addGameBoard(int columns, int rows) {
		GameBoard component = (GameBoard) recoverComponent(GameComponentsLookup.GameBoard);
		if (component == null) {
			component = new GameBoard(columns, rows);
		} else {
			component.columns = columns;;
			component.rows = rows;
		}
		addComponent(GameComponentsLookup.GameBoard, component);
		return this;
	}

	public GameEntity replaceGameBoard(int columns, int rows) {
		GameBoard component = (GameBoard) recoverComponent(GameComponentsLookup.GameBoard);
		if (component == null) {
			component = new GameBoard(columns, rows);
		} else {
			component.columns = columns;;
			component.rows = rows;
		}
		replaceComponent(GameComponentsLookup.GameBoard, component);
		return this;
	}

	public GameEntity removeGameBoard() {
		removeComponent(GameComponentsLookup.GameBoard);
		return this;
	}

	public boolean isGameBoardElement() {
		return hasComponent(GameComponentsLookup.GameBoardElement);
	}

	public GameEntity setGameBoardElement(boolean value) {
		if (value != hasComponent(GameComponentsLookup.GameBoardElement)) {
			if (value) {
				addComponent(GameComponentsLookup.GameBoardElement,
						GameBoardElementComponent);
			} else {
				removeComponent(GameComponentsLookup.GameBoardElement);
			}
		}
		return this;
	}

	public boolean isInteractive() {
		return hasComponent(GameComponentsLookup.Interactive);
	}

	public GameEntity setInteractive(boolean value) {
		if (value != hasComponent(GameComponentsLookup.Interactive)) {
			if (value) {
				addComponent(GameComponentsLookup.Interactive,
						InteractiveComponent);
			} else {
				removeComponent(GameComponentsLookup.Interactive);
			}
		}
		return this;
	}

	public boolean isMovable() {
		return hasComponent(GameComponentsLookup.Movable);
	}

	public GameEntity setMovable(boolean value) {
		if (value != hasComponent(GameComponentsLookup.Movable)) {
			if (value) {
				addComponent(GameComponentsLookup.Movable, MovableComponent);
			} else {
				removeComponent(GameComponentsLookup.Movable);
			}
		}
		return this;
	}

	public Position getPosition() {
		return (Position) getComponent(GameComponentsLookup.Position);
	}

	public boolean hasPosition() {
		return hasComponent(GameComponentsLookup.Position);
	}

	public GameEntity addPosition(int x, int y) {
		Position component = (Position) recoverComponent(GameComponentsLookup.Position);
		if (component == null) {
			component = new Position(x, y);
		} else {
			component.x = x;;
			component.y = y;
		}
		addComponent(GameComponentsLookup.Position, component);
		return this;
	}

	public GameEntity replacePosition(int x, int y) {
		Position component = (Position) recoverComponent(GameComponentsLookup.Position);
		if (component == null) {
			component = new Position(x, y);
		} else {
			component.x = x;;
			component.y = y;
		}
		replaceComponent(GameComponentsLookup.Position, component);
		return this;
	}

	public GameEntity removePosition() {
		removeComponent(GameComponentsLookup.Position);
		return this;
	}

	public TextureView getTextureView() {
		return (TextureView) getComponent(GameComponentsLookup.TextureView);
	}

	public boolean hasTextureView() {
		return hasComponent(GameComponentsLookup.TextureView);
	}

	public GameEntity addTextureView(String name, TextureRegion texture,
			Body body) {
		TextureView component = (TextureView) recoverComponent(GameComponentsLookup.TextureView);
		if (component == null) {
			component = new TextureView(name, texture, body);
		} else {
			component.name = name;;
			component.texture = texture;;
			component.body = body;
		}
		addComponent(GameComponentsLookup.TextureView, component);
		return this;
	}

	public GameEntity replaceTextureView(String name, TextureRegion texture,
			Body body) {
		TextureView component = (TextureView) recoverComponent(GameComponentsLookup.TextureView);
		if (component == null) {
			component = new TextureView(name, texture, body);
		} else {
			component.name = name;;
			component.texture = texture;;
			component.body = body;
		}
		replaceComponent(GameComponentsLookup.TextureView, component);
		return this;
	}

	public GameEntity removeTextureView() {
		removeComponent(GameComponentsLookup.TextureView);
		return this;
	}
}