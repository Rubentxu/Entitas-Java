package com.ilargia.games.core;

import com.ilargia.games.entitas.api.*;
import com.ilargia.games.entitas.Entity;
import java.util.Stack;
import com.ilargia.games.components.Asset;
import com.ilargia.games.components.Destroy;
import com.ilargia.games.components.GameBoard;
import com.ilargia.games.components.GameBoardElement;
import com.ilargia.games.components.Interactive;
import com.ilargia.games.components.Movable;
import com.ilargia.games.components.Position;
import com.ilargia.games.components.View;
import com.badlogic.gdx.graphics.Texture;

/**
 * ---------------------------------------------------------------------------
 * '<auto-generated>' This code was generated by CodeGeneratorApp.
 * ---------------------------------------------------------------------------
 */
public class CoreEntity extends Entity {

	public Destroy DestroyComponent = new Destroy();
	public GameBoardElement GameBoardElementComponent = new GameBoardElement();
	public Interactive InteractiveComponent = new Interactive();
	public Movable MovableComponent = new Movable();

	public CoreEntity(int totalComponents,
			Stack<IComponent>[] componentContexts, ContextInfo contextInfo) {
		super(totalComponents, componentContexts, contextInfo);
	}

	public Asset getAsset() {
		return (Asset) getComponent(CoreComponentIds.Asset);
	}

	public boolean hasAsset() {
		return hasComponent(CoreComponentIds.Asset);
	}

	public CoreEntity addAsset(String name) {
		Asset component = (Asset) recoverComponent(CoreComponentIds.Asset);
		if (component == null) {
			component = new Asset(name);
		} else {
			component.name = name;
		}
		addComponent(CoreComponentIds.Asset, component);
		return this;
	}

	public CoreEntity replaceAsset(String name) {
		Asset component = (Asset) recoverComponent(CoreComponentIds.Asset);
		if (component == null) {
			component = new Asset(name);
		} else {
			component.name = name;
		}
		replaceComponent(CoreComponentIds.Asset, component);
		return this;
	}

	public CoreEntity removeAsset() {
		removeComponent(CoreComponentIds.Asset);
		return this;
	}

	public boolean isDestroy() {
		return hasComponent(CoreComponentIds.Destroy);
	}

	public CoreEntity setDestroy(boolean value) {
		if (value != hasComponent(CoreComponentIds.Destroy)) {
			if (value) {
				addComponent(CoreComponentIds.Destroy, DestroyComponent);
			} else {
				removeComponent(CoreComponentIds.Destroy);
			}
		}
		return this;
	}

	public GameBoard getGameBoard() {
		return (GameBoard) getComponent(CoreComponentIds.GameBoard);
	}

	public boolean hasGameBoard() {
		return hasComponent(CoreComponentIds.GameBoard);
	}

	public CoreEntity addGameBoard(int columns, int rows) {
		GameBoard component = (GameBoard) recoverComponent(CoreComponentIds.GameBoard);
		if (component == null) {
			component = new GameBoard(columns, rows);
		} else {
			component.columns = columns;;
			component.rows = rows;
		}
		addComponent(CoreComponentIds.GameBoard, component);
		return this;
	}

	public CoreEntity replaceGameBoard(int columns, int rows) {
		GameBoard component = (GameBoard) recoverComponent(CoreComponentIds.GameBoard);
		if (component == null) {
			component = new GameBoard(columns, rows);
		} else {
			component.columns = columns;;
			component.rows = rows;
		}
		replaceComponent(CoreComponentIds.GameBoard, component);
		return this;
	}

	public CoreEntity removeGameBoard() {
		removeComponent(CoreComponentIds.GameBoard);
		return this;
	}

	public boolean isGameBoardElement() {
		return hasComponent(CoreComponentIds.GameBoardElement);
	}

	public CoreEntity setGameBoardElement(boolean value) {
		if (value != hasComponent(CoreComponentIds.GameBoardElement)) {
			if (value) {
				addComponent(CoreComponentIds.GameBoardElement,
						GameBoardElementComponent);
			} else {
				removeComponent(CoreComponentIds.GameBoardElement);
			}
		}
		return this;
	}

	public boolean isInteractive() {
		return hasComponent(CoreComponentIds.Interactive);
	}

	public CoreEntity setInteractive(boolean value) {
		if (value != hasComponent(CoreComponentIds.Interactive)) {
			if (value) {
				addComponent(CoreComponentIds.Interactive, InteractiveComponent);
			} else {
				removeComponent(CoreComponentIds.Interactive);
			}
		}
		return this;
	}

	public boolean isMovable() {
		return hasComponent(CoreComponentIds.Movable);
	}

	public CoreEntity setMovable(boolean value) {
		if (value != hasComponent(CoreComponentIds.Movable)) {
			if (value) {
				addComponent(CoreComponentIds.Movable, MovableComponent);
			} else {
				removeComponent(CoreComponentIds.Movable);
			}
		}
		return this;
	}

	public Position getPosition() {
		return (Position) getComponent(CoreComponentIds.Position);
	}

	public boolean hasPosition() {
		return hasComponent(CoreComponentIds.Position);
	}

	public CoreEntity addPosition(int x, int y) {
		Position component = (Position) recoverComponent(CoreComponentIds.Position);
		if (component == null) {
			component = new Position(x, y);
		} else {
			component.x = x;;
			component.y = y;
		}
		addComponent(CoreComponentIds.Position, component);
		return this;
	}

	public CoreEntity replacePosition(int x, int y) {
		Position component = (Position) recoverComponent(CoreComponentIds.Position);
		if (component == null) {
			component = new Position(x, y);
		} else {
			component.x = x;;
			component.y = y;
		}
		replaceComponent(CoreComponentIds.Position, component);
		return this;
	}

	public CoreEntity removePosition() {
		removeComponent(CoreComponentIds.Position);
		return this;
	}

	public View getView() {
		return (View) getComponent(CoreComponentIds.View);
	}

	public boolean hasView() {
		return hasComponent(CoreComponentIds.View);
	}

	public CoreEntity addView(Texture texture) {
		View component = (View) recoverComponent(CoreComponentIds.View);
		if (component == null) {
			component = new View(texture);
		} else {
			component.texture = texture;
		}
		addComponent(CoreComponentIds.View, component);
		return this;
	}

	public CoreEntity replaceView(Texture texture) {
		View component = (View) recoverComponent(CoreComponentIds.View);
		if (component == null) {
			component = new View(texture);
		} else {
			component.texture = texture;
		}
		replaceComponent(CoreComponentIds.View, component);
		return this;
	}

	public CoreEntity removeView() {
		removeComponent(CoreComponentIds.View);
		return this;
	}
}