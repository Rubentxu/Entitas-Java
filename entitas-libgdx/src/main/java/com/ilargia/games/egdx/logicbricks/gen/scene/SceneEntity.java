package com.ilargia.games.egdx.logicbricks.gen.scene;

import com.ilargia.games.entitas.api.*;
import com.ilargia.games.entitas.Entity;
import java.util.Stack;
import com.ilargia.games.egdx.logicbricks.component.scene.Camera;
import com.ilargia.games.entitas.api.IComponent;
import com.ilargia.games.egdx.logicbricks.component.scene.Catch;
import com.badlogic.gdx.graphics.Color;
import com.ilargia.games.egdx.logicbricks.component.scene.GameWorld;
import com.ilargia.games.egdx.logicbricks.component.scene.ParallaxLayer;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Vector2;
import com.ilargia.games.egdx.logicbricks.component.scene.PositionalLight;
import box2dLight.ChainLight;
import box2dLight.ConeLight;
import box2dLight.DirectionalLight;
import box2dLight.PointLight;
import com.ilargia.games.egdx.logicbricks.component.scene.Tiled;

/**
 * ---------------------------------------------------------------------------
 * '<auto-generated>' This code was generated by CodeGeneratorApp.
 * ---------------------------------------------------------------------------
 */
public class SceneEntity extends Entity {

	public SceneEntity() {
	}

	public Camera getCamera() {
		return (Camera) getComponent(SceneComponentsLookup.Camera);
	}

	public boolean hasCamera() {
		return hasComponent(SceneComponentsLookup.Camera);
	}

	public SceneEntity addCamera(com.badlogic.gdx.graphics.Camera camera) {
		Camera component = (Camera) recoverComponent(SceneComponentsLookup.Camera);
		if (component == null) {
			component = new Camera();
		}
		component.camera = camera;
		addComponent(SceneComponentsLookup.Camera, component);
		return this;
	}

	public SceneEntity replaceCamera(com.badlogic.gdx.graphics.Camera camera) {
		Camera component = (Camera) recoverComponent(SceneComponentsLookup.Camera);
		if (component == null) {
			component = new Camera();
		}
		component.camera = camera;
		replaceComponent(SceneComponentsLookup.Camera, component);
		return this;
	}

	public SceneEntity removeCamera() {
		removeComponent(SceneComponentsLookup.Camera);
		return this;
	}

	public Catch getCatch() {
		return (Catch) getComponent(SceneComponentsLookup.Catch);
	}

	public boolean hasCatch() {
		return hasComponent(SceneComponentsLookup.Catch);
	}

	public SceneEntity addCatch(boolean catchBack, boolean catchMenu) {
		Catch component = (Catch) recoverComponent(SceneComponentsLookup.Catch);
		if (component == null) {
			component = new Catch();
		}
		component.catchBack = catchBack;
		component.catchMenu = catchMenu;
		addComponent(SceneComponentsLookup.Catch, component);
		return this;
	}

	public SceneEntity replaceCatch(boolean catchBack, boolean catchMenu) {
		Catch component = (Catch) recoverComponent(SceneComponentsLookup.Catch);
		if (component == null) {
			component = new Catch();
		}
		component.catchBack = catchBack;
		component.catchMenu = catchMenu;
		replaceComponent(SceneComponentsLookup.Catch, component);
		return this;
	}

	public SceneEntity removeCatch() {
		removeComponent(SceneComponentsLookup.Catch);
		return this;
	}

	public GameWorld getGameWorld() {
		return (GameWorld) getComponent(SceneComponentsLookup.GameWorld);
	}

	public boolean hasGameWorld() {
		return hasComponent(SceneComponentsLookup.GameWorld);
	}

	public SceneEntity addGameWorld(float width, float height,
			float metresToPixels, Color backGroundColor) {
		GameWorld component = (GameWorld) recoverComponent(SceneComponentsLookup.GameWorld);
		if (component == null) {
			component = new GameWorld(width, height, metresToPixels,
					backGroundColor);
		} else {
			component.width = width;
			component.height = height;
			component.metresToPixels = metresToPixels;
			component.pixelsToMetres = 1.0f / metresToPixels;
			component.backGroundColor = backGroundColor;
		}
		addComponent(SceneComponentsLookup.GameWorld, component);
		return this;
	}

	public SceneEntity replaceGameWorld(float width, float height,
			float metresToPixels, Color backGroundColor) {
		GameWorld component = (GameWorld) recoverComponent(SceneComponentsLookup.GameWorld);
		if (component == null) {
			component = new GameWorld(width, height, metresToPixels,
					backGroundColor);
		} else {
			component.width = width;
			component.height = height;
			component.metresToPixels = metresToPixels;
			component.pixelsToMetres = 1.0f / metresToPixels;
			component.backGroundColor = backGroundColor;
		}
		replaceComponent(SceneComponentsLookup.GameWorld, component);
		return this;
	}

	public SceneEntity removeGameWorld() {
		removeComponent(SceneComponentsLookup.GameWorld);
		return this;
	}

	public ParallaxLayer getParallaxLayer() {
		return (ParallaxLayer) getComponent(SceneComponentsLookup.ParallaxLayer);
	}

	public boolean hasParallaxLayer() {
		return hasComponent(SceneComponentsLookup.ParallaxLayer);
	}

	public SceneEntity addParallaxLayer(TextureRegion background,
			Vector2 parallaxRatio, Vector2 startPosition, Vector2 padding) {
		ParallaxLayer component = (ParallaxLayer) recoverComponent(SceneComponentsLookup.ParallaxLayer);
		if (component == null) {
			component = new ParallaxLayer(background, parallaxRatio,
					startPosition, padding);
		} else {
			component.background = background;
			component.parallaxRatio = parallaxRatio;
			component.startPosition = startPosition;
			component.padding = padding;
			component.layer = 0;
		}
		addComponent(SceneComponentsLookup.ParallaxLayer, component);
		return this;
	}

	public SceneEntity replaceParallaxLayer(TextureRegion background,
			Vector2 parallaxRatio, Vector2 startPosition, Vector2 padding) {
		ParallaxLayer component = (ParallaxLayer) recoverComponent(SceneComponentsLookup.ParallaxLayer);
		if (component == null) {
			component = new ParallaxLayer(background, parallaxRatio,
					startPosition, padding);
		} else {
			component.background = background;
			component.parallaxRatio = parallaxRatio;
			component.startPosition = startPosition;
			component.padding = padding;
			component.layer = 0;
		}
		replaceComponent(SceneComponentsLookup.ParallaxLayer, component);
		return this;
	}

	public SceneEntity removeParallaxLayer() {
		removeComponent(SceneComponentsLookup.ParallaxLayer);
		return this;
	}

	public PositionalLight getPositionalLight() {
		return (PositionalLight) getComponent(SceneComponentsLookup.PositionalLight);
	}

	public boolean hasPositionalLight() {
		return hasComponent(SceneComponentsLookup.PositionalLight);
	}

	public SceneEntity addPositionalLight(int raysNum, Color color,
			float distance, Vector2 position) {
		PositionalLight component = (PositionalLight) recoverComponent(SceneComponentsLookup.PositionalLight);
		if (component == null) {
			component = new PositionalLight(raysNum, color, distance, position);
		} else {
			component.raysNum = raysNum;
			component.color = color;
			component.distance = distance;
			component.position = position;
			component.light = null;
		}
		addComponent(SceneComponentsLookup.PositionalLight, component);
		return this;
	}

	public SceneEntity replacePositionalLight(int raysNum, Color color,
			float distance, Vector2 position) {
		PositionalLight component = (PositionalLight) recoverComponent(SceneComponentsLookup.PositionalLight);
		if (component == null) {
			component = new PositionalLight(raysNum, color, distance, position);
		} else {
			component.raysNum = raysNum;
			component.color = color;
			component.distance = distance;
			component.position = position;
			component.light = null;
		}
		replaceComponent(SceneComponentsLookup.PositionalLight, component);
		return this;
	}

	public SceneEntity removePositionalLight() {
		removeComponent(SceneComponentsLookup.PositionalLight);
		return this;
	}

	public Tiled getTiled() {
		return (Tiled) getComponent(SceneComponentsLookup.Tiled);
	}

	public boolean hasTiled() {
		return hasComponent(SceneComponentsLookup.Tiled);
	}

	public SceneEntity addTiled(String tileMapName, float unitScale) {
		Tiled component = (Tiled) recoverComponent(SceneComponentsLookup.Tiled);
		if (component == null) {
			component = new Tiled();
		}
		component.tileMapName = tileMapName;
		component.unitScale = unitScale;
		addComponent(SceneComponentsLookup.Tiled, component);
		return this;
	}

	public SceneEntity replaceTiled(String tileMapName, float unitScale) {
		Tiled component = (Tiled) recoverComponent(SceneComponentsLookup.Tiled);
		if (component == null) {
			component = new Tiled();
		}
		component.tileMapName = tileMapName;
		component.unitScale = unitScale;
		replaceComponent(SceneComponentsLookup.Tiled, component);
		return this;
	}

	public SceneEntity removeTiled() {
		removeComponent(SceneComponentsLookup.Tiled);
		return this;
	}
}