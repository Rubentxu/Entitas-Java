package ilargia.egdx.logicbricks.gen.actuator;

import ilargia.egdx.logicbricks.component.actuator.DragActuator;
import ilargia.entitas.Context;
import ilargia.entitas.api.ContextInfo;
import ilargia.entitas.api.entitas.EntitasException;
import ilargia.entitas.api.entitas.EntityBaseFactory;

/**
 * ---------------------------------------------------------------------------
 * '<auto-generated>' This code was generated by CodeGeneratorApp.
 * ---------------------------------------------------------------------------
 */
public class ActuatorContext
		extends
        Context<ActuatorEntity> {

	public ActuatorContext(int totalComponents, int startCreationIndex,
			ContextInfo contextInfo,
			EntityBaseFactory<ActuatorEntity> factoryMethod) {
		super(totalComponents, startCreationIndex, contextInfo, factoryMethod,null);
	}

	public ActuatorEntity getDragActuatorEntity() {
		return getGroup(ActuatorMatcher.DragActuator()).getSingleEntity();
	}

	public DragActuator getDragActuator() {
		return getDragActuatorEntity().getDragActuator();
	}

	public boolean hasDragActuator() {
		return getDragActuatorEntity() != null;
	}

	public ActuatorEntity setDragActuator(int targetEntity,
			boolean collideConnected, float maxForce) {
		if (hasDragActuator()) {
			throw new EntitasException(
					"Could not set DragActuator!" + this
							+ " already has an entity with DragActuator!",
					"You should check if the context already has a DragActuatorEntity before setting it or use context.ReplaceDragActuator().");
		}
		ActuatorEntity entity = createEntity();
		entity.addDragActuator(targetEntity, collideConnected, maxForce);
		return entity;
	}

	public ActuatorEntity replaceDragActuator(int targetEntity,
			boolean collideConnected, float maxForce) {
		ActuatorEntity entity = getDragActuatorEntity();
		if (entity == null) {
			entity = setDragActuator(targetEntity, collideConnected, maxForce);
		} else {
			entity.replaceDragActuator(targetEntity, collideConnected, maxForce);
		}
		return entity;
	}

	public ActuatorContext removeDragActuator() {
		destroyEntity(getDragActuatorEntity());
		return this;
	}
}