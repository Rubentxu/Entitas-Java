package ilargia.egdx.logicbricks.gen.sensor;

import ilargia.entitas.matcher.Matcher;

/**
 * ---------------------------------------------------------------------------
 * '<auto-generated>' This code was generated by CodeGeneratorApp.
 * ---------------------------------------------------------------------------
 */
public class SensorMatcher {

	private static Matcher _matcherAlwaysSensor;
	private static Matcher _matcherCollisionSensor;
	private static Matcher _matcherDelaySensor;
	private static Matcher _matcherFrequency;
	private static Matcher _matcherLink;
	private static Matcher _matcherMode;
	private static Matcher _matcherMouseWheelSensor;
	private static Matcher _matcherNearSensor;
	private static Matcher _matcherPointerOverSensor;
	private static Matcher _matcherRadarSensor;
	private static Matcher _matcherRaySensor;

	public static Matcher AlwaysSensor() {
		if (_matcherAlwaysSensor == null) {
			Matcher matcher = (Matcher) Matcher
					.AllOf(SensorComponentsLookup.AlwaysSensor);
			matcher.componentNames = SensorComponentsLookup.componentNames();
			_matcherAlwaysSensor = matcher;
		}
		return _matcherAlwaysSensor;
	}

	public static Matcher CollisionSensor() {
		if (_matcherCollisionSensor == null) {
			Matcher matcher = (Matcher) Matcher
					.AllOf(SensorComponentsLookup.CollisionSensor);
			matcher.componentNames = SensorComponentsLookup.componentNames();
			_matcherCollisionSensor = matcher;
		}
		return _matcherCollisionSensor;
	}

	public static Matcher DelaySensor() {
		if (_matcherDelaySensor == null) {
			Matcher matcher = (Matcher) Matcher
					.AllOf(SensorComponentsLookup.DelaySensor);
			matcher.componentNames = SensorComponentsLookup.componentNames();
			_matcherDelaySensor = matcher;
		}
		return _matcherDelaySensor;
	}

	public static Matcher Frequency() {
		if (_matcherFrequency == null) {
			Matcher matcher = (Matcher) Matcher
					.AllOf(SensorComponentsLookup.Frequency);
			matcher.componentNames = SensorComponentsLookup.componentNames();
			_matcherFrequency = matcher;
		}
		return _matcherFrequency;
	}

	public static Matcher Link() {
		if (_matcherLink == null) {
			Matcher matcher = (Matcher) Matcher
					.AllOf(SensorComponentsLookup.Link);
			matcher.componentNames = SensorComponentsLookup.componentNames();
			_matcherLink = matcher;
		}
		return _matcherLink;
	}

	public static Matcher Mode() {
		if (_matcherMode == null) {
			Matcher matcher = (Matcher) Matcher
					.AllOf(SensorComponentsLookup.Mode);
			matcher.componentNames = SensorComponentsLookup.componentNames();
			_matcherMode = matcher;
		}
		return _matcherMode;
	}

	public static Matcher MouseWheelSensor() {
		if (_matcherMouseWheelSensor == null) {
			Matcher matcher = (Matcher) Matcher
					.AllOf(SensorComponentsLookup.MouseWheelSensor);
			matcher.componentNames = SensorComponentsLookup.componentNames();
			_matcherMouseWheelSensor = matcher;
		}
		return _matcherMouseWheelSensor;
	}

	public static Matcher NearSensor() {
		if (_matcherNearSensor == null) {
			Matcher matcher = (Matcher) Matcher
					.AllOf(SensorComponentsLookup.NearSensor);
			matcher.componentNames = SensorComponentsLookup.componentNames();
			_matcherNearSensor = matcher;
		}
		return _matcherNearSensor;
	}

	public static Matcher PointerOverSensor() {
		if (_matcherPointerOverSensor == null) {
			Matcher matcher = (Matcher) Matcher
					.AllOf(SensorComponentsLookup.PointerOverSensor);
			matcher.componentNames = SensorComponentsLookup.componentNames();
			_matcherPointerOverSensor = matcher;
		}
		return _matcherPointerOverSensor;
	}

	public static Matcher RadarSensor() {
		if (_matcherRadarSensor == null) {
			Matcher matcher = (Matcher) Matcher
					.AllOf(SensorComponentsLookup.RadarSensor);
			matcher.componentNames = SensorComponentsLookup.componentNames();
			_matcherRadarSensor = matcher;
		}
		return _matcherRadarSensor;
	}

	public static Matcher RaySensor() {
		if (_matcherRaySensor == null) {
			Matcher matcher = (Matcher) Matcher
					.AllOf(SensorComponentsLookup.RaySensor);
			matcher.componentNames = SensorComponentsLookup.componentNames();
			_matcherRaySensor = matcher;
		}
		return _matcherRaySensor;
	}
}