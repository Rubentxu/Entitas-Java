package test.gen.test;

import ilargia.entitas.Entity;
import ilargia.fixtures.components.test.Interactive;
import ilargia.fixtures.components.test.Motion;
import ilargia.fixtures.components.test.Player.ID;
import ilargia.fixtures.components.test.Player;
import test.gen.SharedComponentsLookup;
import ilargia.fixtures.components.test.Position;
import ilargia.fixtures.components.test.Size;

/**
 * //-------------------------------------------------------------------------//
 * <auto-generated>// This code was generated by {0}.//// Changes to this file
 * may cause incorrect behavior and will be lost if// the code is regenerated.//
 * </auto-generated>//----------------------------------------------------------
 * ---------------
 */
public class TestEntity extends Entity {

	public TestEntity() {
	}

	public Interactive getInteractive() {
		return (Interactive) getComponent(TestComponentsLookup.Interactive);
	}

	public boolean hasInteractive() {
		return hasComponent(TestComponentsLookup.Interactive);
	}

	public Motion getMotion() {
		return (Motion) getComponent(TestComponentsLookup.Motion);
	}

	public boolean hasMotion() {
		return hasComponent(TestComponentsLookup.Motion);
	}

	public TestEntity addMotion(float x, float y) {
		Motion component = (Motion) recoverComponent(TestComponentsLookup.Motion);
		if (component == null) {
			component = new Motion(x, y);
		} else {
			component.xVelocity = x;
			component.yVelocity = y;
		}
		addComponent(TestComponentsLookup.Motion, component);
		return this;
	}

	public TestEntity replaceMotion(float x, float y) {
		Motion component = (Motion) recoverComponent(TestComponentsLookup.Motion);
		if (component == null) {
			component = new Motion(x, y);
		} else {
			component.xVelocity = x;
			component.yVelocity = y;
		}
		replaceComponent(TestComponentsLookup.Motion, component);
		return this;
	}

	public TestEntity removeMotion() {
		removeComponent(TestComponentsLookup.Motion);
		return this;
	}

	public Player getPlayer() {
		return (Player) getComponent(SharedComponentsLookup.Player);
	}

	public boolean hasPlayer() {
		return hasComponent(SharedComponentsLookup.Player);
	}

	public TestEntity addPlayer(ID id) {
		Player component = (Player) recoverComponent(SharedComponentsLookup.Player);
		if (component == null) {
			component = new Player(id);
		} else {
			component.id = id;
		}
		addComponent(SharedComponentsLookup.Player, component);
		return this;
	}

	public TestEntity replacePlayer(ID id) {
		Player component = (Player) recoverComponent(SharedComponentsLookup.Player);
		if (component == null) {
			component = new Player(id);
		} else {
			component.id = id;
		}
		replaceComponent(SharedComponentsLookup.Player, component);
		return this;
	}

	public TestEntity removePlayer() {
		removeComponent(SharedComponentsLookup.Player);
		return this;
	}

	public Position getPosition() {
		return (Position) getComponent(TestComponentsLookup.Position);
	}

	public boolean hasPosition() {
		return hasComponent(TestComponentsLookup.Position);
	}

	public TestEntity addPosition() {
		Position component = (Position) recoverComponent(TestComponentsLookup.Position);
		if (component == null) {
			component = new Position();
		} else {
			component.x = 1;
			component.y = 1;
		}
		addComponent(TestComponentsLookup.Position, component);
		return this;
	}

	public TestEntity replacePosition() {
		Position component = (Position) recoverComponent(TestComponentsLookup.Position);
		if (component == null) {
			component = new Position();
		} else {
			component.x = 1;
			component.y = 1;
		}
		replaceComponent(TestComponentsLookup.Position, component);
		return this;
	}

	public TestEntity removePosition() {
		removeComponent(TestComponentsLookup.Position);
		return this;
	}

	public Size getSize() {
		return (Size) getComponent(TestComponentsLookup.Size);
	}

	public boolean hasSize() {
		return hasComponent(TestComponentsLookup.Size);
	}

	public TestEntity addSize(int width, int height) {
		Size component = (Size) recoverComponent(TestComponentsLookup.Size);
		if (component == null) {
			component = new Size(width, height);
		} else {
			component.width = width;
			component.height = height;
		}
		addComponent(TestComponentsLookup.Size, component);
		return this;
	}

	public TestEntity replaceSize(int width, int height) {
		Size component = (Size) recoverComponent(TestComponentsLookup.Size);
		if (component == null) {
			component = new Size(width, height);
		} else {
			component.width = width;
			component.height = height;
		}
		replaceComponent(TestComponentsLookup.Size, component);
		return this;
	}

	public TestEntity removeSize() {
		removeComponent(TestComponentsLookup.Size);
		return this;
	}
}