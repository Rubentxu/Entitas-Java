package test.gen.game;

import ilargia.entitas.Entity;
import ilargia.fixtures.components.game.Ball;
import ilargia.fixtures.components.game.Bounds.Tag;
import ilargia.fixtures.components.game.Bounds;

/**
 * //-------------------------------------------------------------------------//
 * <auto-generated>// This code was generated by {0}.//// Changes to this file
 * may cause incorrect behavior and will be lost if// the code is regenerated.//
 * </auto-generated>//----------------------------------------------------------
 * ---------------
 */
public class GameEntity extends Entity {

	public Ball BallComponent = new Ball();

	public GameEntity() {
	}

	public boolean isBall() {
		return hasComponent(GameComponentsLookup.Ball);
	}

	public GameEntity setBall(boolean value) {
		if (value != hasComponent(GameComponentsLookup.Ball)) {
			if (value) {
				addComponent(GameComponentsLookup.Ball, BallComponent);
			} else {
				removeComponent(GameComponentsLookup.Ball);
			}
		}
		return this;
	}

	public GameEntity addBall() {
		Ball component = (Ball) recoverComponent(GameComponentsLookup.Ball);
		if (component == null) {
			component = new Ball();
		} else {
		}
		addComponent(GameComponentsLookup.Ball, component);
		return this;
	}

	public GameEntity replaceBall() {
		Ball component = (Ball) recoverComponent(GameComponentsLookup.Ball);
		if (component == null) {
			component = new Ball();
		} else {
		}
		replaceComponent(GameComponentsLookup.Ball, component);
		return this;
	}

	public GameEntity removeBall() {
		removeComponent(GameComponentsLookup.Ball);
		return this;
	}

	public Bounds getBounds() {
		return (Bounds) getComponent(GameComponentsLookup.Bounds);
	}

	public boolean hasBounds() {
		return hasComponent(GameComponentsLookup.Bounds);
	}

	public GameEntity addBounds() {
		Bounds component = (Bounds) recoverComponent(GameComponentsLookup.Bounds);
		if (component == null) {
			component = new Bounds();
		} else {
		}
		addComponent(GameComponentsLookup.Bounds, component);
		return this;
	}

	public GameEntity replaceBounds() {
		Bounds component = (Bounds) recoverComponent(GameComponentsLookup.Bounds);
		if (component == null) {
			component = new Bounds();
		} else {
		}
		replaceComponent(GameComponentsLookup.Bounds, component);
		return this;
	}

	public GameEntity removeBounds() {
		removeComponent(GameComponentsLookup.Bounds);
		return this;
	}
}