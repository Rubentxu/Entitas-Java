package com.ilargia.games.entitas.codeGenerator.generated;

import com.ilargia.games.entitas.PoolMetaData;
import com.ilargia.games.entitas.interfaces.IComponent;
import java.util.Stack;
import com.ilargia.games.entitas.codeGenerator.Components.Screen;
import com.ilargia.games.entitas.codeGenerator.Components.Score;
import com.ilargia.games.entitas.codeGenerator.Components.Position;
import com.ilargia.games.entitas.codeGenerator.Components.Bounds;
import com.badlogic.gdx.math.Rectangle;
import com.ilargia.games.entitas.codeGenerator.Components.View;
import com.ilargia.games.entitas.codeGenerator.Components.Motion;
import com.badlogic.gdx.math.Vector2;
import com.ilargia.games.entitas.codeGenerator.Components.GameOver;

/**
 * ---------------------------------------------------------------------------
 * '<auto-generated>' This code was generated by CodeGeneratorApp. Changes to
 * this file may cause incorrect behavior and will be lost.
 * 
 * ---------------------------------------------------------------------------
 */
public class Entity extends com.ilargia.games.entitas.Entity {

	public GameOver GameOverComponent = new GameOver();

	public Entity(int totalComponents, Stack<IComponent>[] componentPools,
			PoolMetaData poolMetaData) {
		super(totalComponents, componentPools, poolMetaData);
	}

	public Screen getScreen() {
		return (Screen) getComponent(CoreComponentIds.Screen);
	}

	public boolean hasScreen() {
		return hasComponent(CoreComponentIds.Screen);
	}

	public void addScreen(float _width, float _height) {
		Screen component = createComponent(CoreComponentIds.Screen,
				Screen.class);
		component.width = _width;
		component.height = _height;
		addComponent(CoreComponentIds.Screen, component);
	}

	public void replaceScreen(float _width, float _height) {
		Screen component = createComponent(CoreComponentIds.Screen,
				Screen.class);
		component.width = _width;
		component.height = _height;
		replaceComponent(CoreComponentIds.Screen, component);
	}

	public void removeScreen() {
		removeComponent(CoreComponentIds.Screen);
	}

	public Score getScore() {
		return (Score) getComponent(CoreComponentIds.Score);
	}

	public boolean hasScore() {
		return hasComponent(CoreComponentIds.Score);
	}

	public void addScore(int _value) {
		Score component = createComponent(CoreComponentIds.Score, Score.class);
		component.value = _value;
		addComponent(CoreComponentIds.Score, component);
	}

	public void replaceScore(int _value) {
		Score component = createComponent(CoreComponentIds.Score, Score.class);
		component.value = _value;
		replaceComponent(CoreComponentIds.Score, component);
	}

	public void removeScore() {
		removeComponent(CoreComponentIds.Score);
	}

	public Position getPosition() {
		return (Position) getComponent(CoreComponentIds.Position);
	}

	public boolean hasPosition() {
		return hasComponent(CoreComponentIds.Position);
	}

	public void addPosition(float _x, float _y) {
		Position component = createComponent(CoreComponentIds.Position,
				Position.class);
		component.x = _x;
		component.y = _y;
		addComponent(CoreComponentIds.Position, component);
	}

	public void replacePosition(float _x, float _y) {
		Position component = createComponent(CoreComponentIds.Position,
				Position.class);
		component.x = _x;
		component.y = _y;
		replaceComponent(CoreComponentIds.Position, component);
	}

	public void removePosition() {
		removeComponent(CoreComponentIds.Position);
	}

	public Bounds getBounds() {
		return (Bounds) getComponent(CoreComponentIds.Bounds);
	}

	public boolean hasBounds() {
		return hasComponent(CoreComponentIds.Bounds);
	}

	public void addBounds(Rectangle _rectangle) {
		Bounds component = createComponent(CoreComponentIds.Bounds,
				Bounds.class);
		component.rectangle = _rectangle;
		addComponent(CoreComponentIds.Bounds, component);
	}

	public void replaceBounds(Rectangle _rectangle) {
		Bounds component = createComponent(CoreComponentIds.Bounds,
				Bounds.class);
		component.rectangle = _rectangle;
		replaceComponent(CoreComponentIds.Bounds, component);
	}

	public void removeBounds() {
		removeComponent(CoreComponentIds.Bounds);
	}

	public View getView() {
		return (View) getComponent(CoreComponentIds.View);
	}

	public boolean hasView() {
		return hasComponent(CoreComponentIds.View);
	}

	public void addView(Rectangle _shape) {
		View component = createComponent(CoreComponentIds.View, View.class);
		component.shape = _shape;
		addComponent(CoreComponentIds.View, component);
	}

	public void replaceView(Rectangle _shape) {
		View component = createComponent(CoreComponentIds.View, View.class);
		component.shape = _shape;
		replaceComponent(CoreComponentIds.View, component);
	}

	public void removeView() {
		removeComponent(CoreComponentIds.View);
	}

	public Motion getMotion() {
		return (Motion) getComponent(CoreComponentIds.Motion);
	}

	public boolean hasMotion() {
		return hasComponent(CoreComponentIds.Motion);
	}

	public void addMotion(Vector2 _velocity) {
		Motion component = createComponent(CoreComponentIds.Motion,
				Motion.class);
		component.velocity = _velocity;
		addComponent(CoreComponentIds.Motion, component);
	}

	public void replaceMotion(Vector2 _velocity) {
		Motion component = createComponent(CoreComponentIds.Motion,
				Motion.class);
		component.velocity = _velocity;
		replaceComponent(CoreComponentIds.Motion, component);
	}

	public void removeMotion() {
		removeComponent(CoreComponentIds.Motion);
	}

	public boolean GameOver() {
		return hasComponent(CoreComponentIds.GameOver);
	}

	public void setGameOver(boolean value) {
		if (value != hasComponent(CoreComponentIds.GameOver)) {
			if (value) {
				addComponent(CoreComponentIds.GameOver, GameOverComponent);
			} else {
				removeComponent(CoreComponentIds.GameOver);
			}
		}
	}
}